스프링 프레임워크, Spring Framework
	- 개발환경 + 실행환경 + 생산성 + 개발 편의성 + 디버깅 + 팀작업 + 대형화 프로젝트 등..
	- http://spring.io
	- 스프링 프레임워크는 자바 플랫폼을 위한 오픈 소스 애플리케이션 프레임워크
	- 2004년
	- 정부 사업 및 기업 프로젝트의 개발 환경을 통일 -> 대한민국 전자 정부 표준 프레임워크 ->Spring 기반 -> 현재까지..
	
스프링 프레임워크 구성요소
	1. 의존성 주입 지원(DI)
	2. 관점 지향 프로그래밍(AOP)
	3. MVC 지원 (Spring MVC)
	4. 데이터베이스 프레임워크와 호환성 높음
		- JDBC
		- Spring JDBC
		- MyBatis
		
스프링 선수 지식
	1. Java -> OOP
		- 클래스(객체), 상속, 인터페이스 등..
	2. 콘솔 or 웹
		- 무관
	3. XML
		- 데이터를 저장하는 용도의 수준(JSON 정도)
		- 스프링의 대다수 환경 설정
		
스프링 개발 환경
	1. 이클립스 + 스프링 라이브러리(*.jar)
		- http://repo.spring.io/release/org/springframework/spring/
	2. 이클립스 + STS 플러그인 설치
	3. STS 툴 제공(내부적으로 이클립스)
	
스프링 DI
	- Dependency Injection
	- 의존(성) 주입
	- 프로그래밍에서 구성 요소간의 의존 관계가 소스 내부가 아닌 외부 환경에 의해서 정의되게 하는 디자인 패턴중 하나
	- 하나의 객체가 자신의 기능을 실행하기 위해 반드시 다른 특정 객체가 필요한 경우 그 특정 객체를 자신이 직접 생성하지 않고 외부로부터 건내받아 생성하는 경우를 의존 주입이라고 한다.
	
스프링 AOP, Aspect Oriented Programming
	- 관점 지향 프로그래밍
	- 생산 & 유지 보수를 더 편하게 하기 위한 프로그래밍 기법
	- 주업무와 보조업무를 구분지어 효율적으로 관리하기 위한 기법(**)
	
Core Concern
	- 주 업무
	
Cross-Cutting Concern
	- 보조 업무
	
보조 업무를 주업무와 분리시켜 관리하는 경우(장점)
1. 생산성 높아진다.
2. 변화가 쉽다.
3. 코드 가독성 높아진다.
4. 시스템 안정성이 높아진다.

보조 업무를 주업무와 분리시켜 관리하지 않는 경우(단점)
1. 코드 변경이 힘들다.
2. 분업이 어렵다.
3. 코드 가독성 낮아진다.

AOP 용어

1. Advice
	- 보조 업무가 주 업무 실행 중 어느 시점에 끼어들어서 실행할지에 대한 미리 정해진 규칙
	a. Before
		- 주 업무를 실행하기 전에 보조업무를 추가하겠다.
	b. After
		- 주 업무를 실행하고 난 후에 보조 업무를 추가하겠다.
	c. After-returning
		- 주 업무를 실행하고 난 후에 주업무의 반환값을 사용해서 보조업무를 추가하겠다.
	d. After-throwing
		- 주 업무를 실행 중 예외가 발생했을 때 보조업무를 추가하겠다.
	e. Around
		- 주 업무의 실행 전과 실행 후에 각각 보조 업무를 추가하겠다.
		
2. Join Point

3. Point Cut

4. Aspect

5. Weaving
	- 주업무에 보조업무를 적용하는 물리적인 행동
	a. 컴파일 시 적용하기
	b. 클래스 로딩 시 적용하기
	c. 런타임 시 적용하기
		- Spring AOP는 런타임 위빙 방식만 지원한다.
		- Spring AOP는 위빙 작업을 'AspectJ' 문법을 사용한다. > Aspect <-> (Point Cut) <-> Join Point 
		
6. Proxy

Spring AOP 구현 방식
	a. XML 기반 방식
	b. 어노테이션 기반 방식
	c. 스프링 API 기반 구현 방식 //X
	
예제
- 콘솔 프로젝트 + AOP 적용
- 자바 + 스프링 기반
- 메모장

업무
1. 주업무
	a. 메모 쓰기
	b. 메모 읽기
	c. 메모 수정
	d. 메모 삭제
2. 보조업무
	a. 인증 유무 검사
	b. 트랜잭션 처리
	c. 로그 처리
	
파일 생성
1. com.test.spring.aop > Main.java			: 메인 클래스(main())
2. com.test.spring.aop > Memo.java			: 주업무 클래스(메모 작업)
3. com.test.spring.aop > IMemo.java			: 주업무 인터페이스
-------------------------------------------------------
4. com.test.spring.aop > Logger.java		: 보조업무 클래스(로그 작업)
5. com.test.spring.aop > Auth.java			: 보조업무 클래스(인증 작업)
-------------------------------------------------------
6. src > memo.xml							: AOP 설정(DI + AOP)

Spring AOP 라이브러리

1. aopalliance-1.0.jar
2. aspectjweaver-1.6.10.jar


파일 생성

1. Java Resources > src/main/java > com.test.spring > Ex01.java

2. src > main > webapp > WEB-INF > views > ex01.jsp

스프링 MVC 프로젝트 동작 순서(+ Servlet/JSP MVC 프로젝트 동작 순서 비교)

1. Ex01.java 생성
	- 컨트롤러 파일
	
2. ex01.jsp 생성
	- View 파일

3. web.xml 설정
	- *.action : 스프링 요청 확장자 지정
	
4. root-context.xml 설정
	- 
	
5. servlet-context.xml 설정
	- 여러가지 설정
	- 컨트롤러 빈을 설정(가상주소 매핑)
	
== 서버 시작 전

== 서버 시작

6. 아파치 기동, 톰캣 기동
	- 여러 설정 파일 읽기
	a. web.xml
		- 사이트 전반적인 설정(스프링, Servlet/JSP 등등..)
		- DispatcherServlet 설정 인식
			a. *.action > 모든 스프링 요청을 하게될 확장자 필터
	b. root-context.xml
		- 사이트 전반적인 설정(스프링에 대한 내용만)
	c. servlet-context.xml
		- 요청에 관련된 설정만
		- 미리 만들어 놓은 컨트롤러의 <bean>을 인식
		
== 서버 시작

== 처음으로 고객이 URL 요청

7. url 요청
	- http://localhost/spring/ex01.action
	
8. HTTP Request 발생
	- 서버에게 요청
	
9. 아파치 요청 받음
	a. url 확인
	b. ex01.action 확인
	c. 스프링 요청인걸 확인 후 > DispatcherServlet 호출
	
10. DispatcherServlet 동작
	a. url 확인
	b. Context Path 이하의 경로를 취함
		- http://localhost/spring/ex01.action > /ex01.action
	c. "/ex01.action"를 사용해서 servlet-context.xml에 정의된 <bean>들 중 name값이 일치하는 빈을 찾는다.
	d. context.getBean("/ex01.action")호출 + 컨트롤러 객체 생성
	e. 컨트롤러의 handleRequest 메소드 호출
	f. 업무 실행
	g. 뷰 호출
	h. 응답
	
11. HTTP Response 발생

12. 브라우저 페이지 로드

파일 생성
- DI 적용

com.test.spring > Ex03Controller.java
com.test.spring > Ex03DAO.java

views > ex03.jsp


내장 객체

Ex05Controller.java
ex05.jsp // 폼 페이지

Ex05OkController.java
ex05ok.jsp // 결과 페이지