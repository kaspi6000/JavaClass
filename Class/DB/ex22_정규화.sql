/*
    데이터베이스 작업
    1. 데이터베이스 설계
    - 요구 > 업무 > 데이터베이스 설계
    - 테이블 설계 > 컬럼 정의 > 테이블 관계
    - 도식 > ERD(Entity Relationship Diagram
    
    a. 데이터베이스 모델링
        - 가장 초반 작업
        - 데이터베이스 구성 요소 > 테이블 도식화 > 최종 산출물 > ERD
        
    b. 데이터베이스 설계
        - 모델링 결과를 가지고 하는 그 다음 작업
        
    2. 데이터베이스 구현
    
    [데이터베이스 모델링]
    
    1. ERD
    - 엔티티 관계 다이어그램
    - 모델링 대표적인 방식
    - 손, 오피스, 그림판, eXERD, ER-WIN 등..
    
    2. Entity, 엔티티
    - 다른 Entity와 분류될 수 있고, 다른 Entity에 대해서 정해진 관계를 맺을 수 있는 데이터 단위
    - ex) 회사 정보 관리 프로그램
        a. 사원 정보 관리
            - 정보 : 사원명, 나이, 사원번호, 연락처, 주소 등..
            - 사원 정보의 집합 -> 엔티티
            - 다른 정보와 구분이 가능한 데이터의 최소 집합
        b. 부서 정보 관리
            - 정보 : 부서명, 부서번호, 호실, 내선번호 등..
            - 부서 정보의 집합 -> 엔티티
    - 구현 > 테이블 or 폴더 개념
    
    3. Entity Relationship
    - 엔티티간의 관계
    - 테이블과 테이블간의 관계(PK-FK)
    
    4. Attribute, 속성
    - 엔티티가 가지는 세부 정보
    - 사원 엔티티 = 여러개의 속성으로 구성(사원번호, 이름, 주소, 나이 등..)
    - 속성의 집합 = 엔티티
    
    5. Tuple, 튜플
    - 엔티티에 정의된 규칙(속성)으로 만들어진 실제 데이터
    - 행(레코드) -> 실제 객체
    - Row, Record, Tuple..
    
    
    ERD 에서 Entity, Attribute, Relationship을 표현하는 방법(그리는 방법)
    1. Entity
    - 사각형 표시
    - 이름은 대문자
    - 중복 불가능
    - 보통 단수로 표기
    
    2. Attribute
    - Entity 내에 표기
    - 단수로 표기
    - 목록으로 표기
    - 추가 표시 사항(속성에 대한 기술)
        a. NN, NOT NULL
        - 이 속성은 비워둔 채로 두면 안됩니다.
        - 필수 속성
        b. ND, NOT Duplicate
        - 이 속성은 중복값을 가질 수 없습니다.
        - UNIQUE
        
        1. 중복되면 안되고 생략되면 안된다.(NN, ND)
        - #*속성명
        2. 생략하면 안된다.(NN)
        - *속성명
        3. 생략해도 되지만 중복되면 안된다.(ND)
        - #속성명
        4. 생략해도 되고, 중복되도 된다
        - 속성명
        - O속성명(Optional)
        
    3. Relationship(**)
    - 엔티티와 엔티티간의 관계
    - 행과 행의 관계(**)
        a. 1 : 1 관계
        b. 1 : 0 관계
        c. 1 : N 관계
        d. 1 : N 관계
    
    eXERD 실행
    
    1. 엔티티 + 관계 + 한글식별자
    - 논리 다이아그램, 논리 모델
    - 업무용 + 사람용
    
    2. 엔티티 + 관계 + DBMS식별자
    - 물리 다이아그램, 물리 모델
    - 개발용(개발하는 담당자용)
    
    정규화, Normalization
    - 자료의 손실이나 불필요한 정보를 없애고, 데이터의 일관성을 유지하며, 데이터 중복을 최소화하기 위해 자료 구조(테이블 스키마)를 변경하는 작업
    - 우리가 만든 테이블(비정형) -> 정규형의 테이블로 변환
    - 제 1 정규화 ~ 제 3 정규화
    
    관계형 데이터베이스 시스템이 지향하는 상태
    1. NULL을 갖지 않는다.
    2. 중복값을 갖지 않는다.
    
    키, Key
    - 역할(의미)이 부여된 속성(Attribute), 컬럼(Column)
    - 테이블내에서 정보만 가지고 있는 일반 속성과는 달리 특정 역할을 하는 속성
    
    1. 기본키, Primary Key
    - 테이블(Relation)에서 엔티티(Entity)를 유일하게 식별하기 위해서 사용되는 키
    - ex) 회원테이블 : 회원번호
          게시판 테이블 : 글번호
          상품 테이블 : 상품 코드
          주민 테이블 : 주민 번호
    
    2. 후보키, Candidate Key
    - 테이블내에서 엔티티를 식별할 수 있는 키
    - 후보키들 중에 대표로 선발된 키 -> 기본 키
    - ex) 회원 테이블 : 회원번호, 아이디, 이름
    
    3. 대체키, Alternate Key
    - 후보키들 중에서 기본키를 제외한 나머지
    
    4. 외래키, Foreign Key
    - 부모 테이블의 기본키를 참조하는 키
    - 테이블(Relation)간의 관계(Relationship)을 표현하는 역할
    
    5. 슈퍼키, Super Key
    - 복합키, Composite Key
    - 하나의 테이블에서 PK를 1개의 컬럼으로 지정 못하는 경우 -> 여러개의 컬럼을 합쳐서 기본키로 지정하는 경우
    - ex) 비디오 대여 테이블
    
    [회원번호]      [비디오번호]     [대여날짜]
    1               2               2018-01-28
    2               5               2018-01-28
    3               1               2018-01-28
    1               7               2018-01-28
    1               9               2018-01-28
    4               9               2018-01-28
    5               9               2018-01-28
    
    6. 일반키
    - 위의 1 ~ 5 중 어디에도 속하지 않는 키
    - 평범한 데이터
    
    
    정규화를 하는 목적
    1. NULL + 중복값을 제거
    2. 자료 삽입, 갱신, 삭제에 따른 이상 현상 제거
    
    이상 현상(Anomaly)
    - 발생 이유 -> 테이블 설계가 잘못되어서 -> 이상 현상을 발생하지 않도록 테이블 바로 잡자 -> 정규화
    
    1. 삽입 이상(Insertion Anomaly)
    - 특정 테이블 데이터 삽입할 때 원하지 않는 데이터까지도 넣어야 하는 상황
    
    2. 삭제 이상(Deletion Anomaly)
    - 특정 테이블에서 데이터 삭제할 때 원하지 않는 데이터까지도 삭제되는 상황
    
    3. 갱신 이상(Update Anomaly)
    - 동일한 데이터가 2개 이상의 테이블에 동시 존재 -> 1개의 테이블 데이터 수정 + 마침 -> 다른 테이블의 데이터와 상태가 달라지는 경우
    
    
    함수 종속(Functional Dependency)
    - 하나의 테이블내에서 2개이상의 속성간의 관계 제약
    - 정규화는 부분 함수 종속이나 이행 함수 종속을 모두 없애고, 모든 컬럼을 완전 함수 종속으로 만드는 작업이다.(**)
    
    1. 완전 함수 종속, Full Functional Dependency
    2. 부분 함수 종속, Partial Functional Dependency
    3. 이행 함수 종속, Transtibe Functional Dependency
    
    정규화 종류
    - 1NF ~ 3NF(Normal Form)
    - 비정규형 -> (정규화) -> 정규형
    
    정규화 결과
    - 1개 테이블 -> 2개 이상의 테이블
    
    제1정규화, 1NF
    - 제 1정규화를 만족하는 정규형의 규칙
    - 모든 컬럼(속성)은 원자값을 가진다
    - 여러개의 값들을 하나의 컬럼에 넣으면 안된다.
    - 1개의 셀안에 2개 이상의 복합 테이터가 보이면 -> 새롭게 컬럼을 나눠서 단일값(1개의 컬럼 = 1개의 값)으로 바꾼다.
        ** 가로로 컬럼을 늘리면 -> NULL 발생
        ** 세로로 행을 늘린다 -> 중복값 레코드 발생 -> 테이블 분할
    - 분할된 테이블들이 기본키를 정할 수 있는 상태가 된다.
    
    제2정규화, 2NF
    - 키가 아닌 모든 컬럼은 키 전체에 완전 함수 종속이어야 한다.
    - 부분 함수 종속을 발견해서 제거한다.(**)
    - 복합키를 가지는 테이블에서만 발생한다.(PK 1개인 테이블에서는 발생 안함)
    
    제3정규화, 3NF
    - 기본키가 아닌 컬럼에 의존하면 안된다.
    - 기본키 이외에 키가 중복값을 갖는지 확인한다.
    - 이행 함수 종속을 발견 -> 제거
    - A -> B -> C (**)
    
    모델링 툴 기능
    1. ERD 작성
    2. 순공학, 역공학
        a. 순공학, Forward Engineering
            - ERD -> DB에 직접 구축
        
        b. 역공학, Reverse Engineering
            - DB 구축 내용 -> ERD
*/