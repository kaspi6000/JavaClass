1. HTML
2. CSS
3. Javascript
4. jQuery, Bootstrap

Server Side Progrmming
- 웹서버에서 동작(실행)하는 언어(기술)
- 웹서버 : 아파치(웹서버) + 톰캣(WAS, Web Application Server)
1. Servlet
2. JSP
3. Servlet + JSP
4. Spring + Mybaits

생성한 Dynamic Web Project 의 구조

1. Java Resources
	a. src
		- 패키지와 자바 클래스를 관리하는 폴더
		- 일반 클래스(클래스, 인터페이스, 추상클래스 등..)
		- 서블릿 클래스
		- DAO, DTO등..
	b. Libraries
		- JRE System Library
			- 위의 자바 클래스들이 사용할 JRE 라이브러리
		- Apache Tomcat v9.0
			- Servlet/JSP 등 자바 웹 기술들을 사용하는데 필요한 라이브러리
		
2. WebContent
	- 브라우저를 통해서 제공되는 리소스를 관리하는 폴더
	- 웹페이지(*.html), 이미지, CSS, JS 파일 등..
	- 이 폴더를 벗어나면 브라우저가 접근 불가능
	- 리소스 최상위 폴더
	- WebContent 하위에 자유롭게 폴더 생성 가능
	a. META_INF
		- 시스템 폴더
	b. WEB-INF
		- 웹 사이트의 환경 설정에 관련된 역할
		- 브라우저는 이 폴더에 접근할 권한이 없다.(웹페이지, 이미지, CSS, JS 등의 파일을 이 폴더 이하에 넣으면 접근 불가능)
	c. WEB-INF/lib
		- Library(*.jar > 클래스 집합)
		- 사용자 정의 폴더
		- 개발자가 추가하고 싶은 라이브러리 파일을 넣는 곳
	d. WEB-INF/web.xml
		- 추가 생성
		- Deployment Descriptor
		- 웹 사이트의 기본적인 환경 설정 파일
		- Servlet/JSP/기타 등등 설정 역할
		
===================================================================================================

Servlet, 서블릿

- 자바 언어를 사용해서[동적으로] 웹페이지를 생성하는 기술
- Server + Applet = 서버측에서 동작하는 자바 프로그램
- 웹 서버측에 자바 클래스 구현 + 컴파일 + 실행
- 브라우저의 요청을 받아서 업무처리 + 웹페이지 생성한 뒤 브라우저에게 돌려주는 기술

정적 페이지 vs 동적 페이지
- 정적 페이지 : *.html
- 동적 페이지 : *.jsp, *.do, *.action, *.html

Servlet, 서블릿
- 웹 어플리케이션(사이트)를 동적으로 생성하는 기술

CGI, Common Gateway Interface
- 브라우저와 웹서버간의 데이터(정보)를 주고받는 규약
- 이걸 구현한 기술 : Servlet, PHP, ASP등..
- C언어, Perl 언어를 사용해서 구현 -> 웹 전용 개발 언어(기술) 구현(Servlet)

ASP, Active Server Pages
- MS
- Visual Basic - > VBScript 사용
- 쉽다.(기능 적다) -> 다른 라이브러리 참조가 쉽다.
- JSP와 유사

ASP.NET
- MS
- C# 사용

PHP, Personal Homepage Preprocessor
- C 기반 스크립트 언어
- 개인 사이트용 -> 기업용 많이 사용
- 100% 무료
- Apache + PHP + MySQL + Linux

JSP, Java Server pages
- MS의 ASP를 자바 버전으로 구현

========================================================================================

웹 서비스, Web Services

- 웹 서버(아파치톰캣)와 클라이언트(크롬)간의 통신 - 웹페이지, 이미지 등등을 주고 받는 서비스
- 웹 서버 프로그램과 클라이언트 프로그램간의 요청(request 컨텐츠가 담긴 페이지를 브라우저가 서버에게 요청)을 하고 응답(response 브라우저가 요구한 페이지를 반환)을 하는 통신

HTTP 프로토콜
- 인터넷 프로토콜 : TCP/IP, FTP, SMTP, HTTP 등..
- 브라우저 <-> 웹서버 : HTTP 사용
- HTTP 프로토콜 : 요청(Request)과 응답(Response)의 형태로 구성되어 있다.
- 요청(Request)
	a. GET : 요청한 URL의 정보를 가져온다.
	b. POST : 요청한 URL에 새로운 정보를 보낸다.
	
HTTP 요청 메시지
- 시작 라인 + 헤더 + 본문

HTTP 응답 메시지
- 시작 라인 + 헤더 + 본문

헤더
1. 일반헤더, General Headers
	- 클라이언트와 서버 모두 사용하는 헤더
	a. Request URL : http://localhost:8082/ServletTest/hello.html
		- 요청 URL
	b. Request Method : GET
		- 요청 방식
	c. Status Code
		- 상태 코드
	d. Remote Address : [::1]:8082
		- 클라이언트 주소(브라우저의 컴퓨터 주소)
	e. Referrer Policy : no-referrer-when-downgrade
	
2. 요청 헤더, Request Headers
	- 브라우저가 서버에게 보내는 정보
	a. Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
		- 서버에게 내가 받을 수 있는 컨텐츠 종류를 알려줌
	b. Accept-Encoding: gzip, deflate, br
		- 서버에게 내가 받을 수 있는 인코딩 종류를 알려줌
	c. Accept-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
		- 서버에게 내가 받을 수 있는 언어를 알려줌
	d. Cache-Control: max-age=0
		- 캐시 설정
	e. Connection: keep-alive
	f. Host: localhost:8082
		- 서버 정보
	g. If-Modified-Since: Mon, 02 Apr 2018 01:44:29 GMT
		- 페이지 정보
	h. If-None-Match: W/"126-1522633469758"
		- ?
	i. Upgrade-Insecure-Requests: 1
		- ?
	j. User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36
		- 내 정보(브라우저 정보)
		
3. 응답 헤더, Response Headers
	a. Date: Mon, 02 Apr 2018 02:15:02 GMT
		- 응답 시간
	b. ETag: W/"132-1522635301012"
	c. Content-Length: 132
		- 응답 데이터 크기(웹페이지 사이즈)
	d. Content-Type: text/html
		- 응답 컨텐츠 종류 + 인코딩

4. 상태 코드, Status Code
	- 서버가 브라우저에게 전달하는 상태
	a. 1XX : 정보
		- 요청을 받았고 작업이 진행중이다. 거의 못봄
	b. 2XX : 성공
		- 요청을 성공적으로 받았고 승락했다.
		- 200 OK : 성공적으로 처리했다.
		- 206 Partial Content : 컨텐츠의 일부분만 제공한다.
	c. 3XX : 리다이렉트
		- 이 요청을 완료하려면 리다이렉션이 이루어져야 한다.
		- 예) http://goo.gl/Acde23
----------------------------------------------------여기부터는 에러 메시지가 브라우저에 출력됨
	d. 4XX : Client Err
		- 이 요청은 올바르지 않다.
		- 400 Bad Request : 요청 자체가 잘못됐다.
		- 401 Unauthorized : 인증이 필요한데 인증없이 접근했을때
		- 403 Forbidden : 서버가 요청을 거부한다.
		- 404 Not Found : 요청한 리소스가 없다.(URL 틀림)
		- 408 Request Timeout : 요청 시간이 초과됐다.
	e. 5XX : Server Err
		- 요청은 올바르지만 서버측에서 응답할 수 없다.
		- 500 Internal Server Error : 서버 작업 중 오류가 발생해서 요청 작업을 수행할 수 없다. 자바(오라클)에러
		- 502 Bad Gateway : 게이트웨이 동작 오류
		- 504 Gateway Timeout : 게이트웨이 응답 지연
		- 520 Unknown Error : 알 수 없는 오류
		
페이지 동적 생성 -> 알바생 -> 자바 클래스(프로그램) -> 서블릿 구현 -> 서블릿 클래스

Servlet Class 작성 규칙

1. 서블릿 클래스 선언
	a. javax.servlet.Servlet 인터페이스를 구현해야 된다.(상속)
		- 복잡함. 모든 내용을 직접 구현
	b. javax.servlet.http.HttpServlet 클래스를 상속받아야 한다.(상속)
		- 간편함. 대부분의 코드를 미리 구현해놨기 때문
		
2. doGet/doPost 메소드 선언
	- 둘 중 1개 이상을 구현
	- doGet()
	- doPost()
	- doGet() + doPost()
	- 클라이언트의 요청이 들어오면 자동으로 실행되는 메소드
	- 알바생이 주문을 받고 + 작업을 시작하는 메소드
	- 이 메소드내에서 동적으로 HTML문서를 생성한다(**)
	- 메소드 작성 규칙
		a. 매개변수 작성
			- javax.servlet.http.HttpServletRequest
			- javax.servlet.http.HttpServletResponse
		b. 예외 미루기(처리)
			- throws java.io.IOException
			- throws javax.servlet.ServletException
			
3. 메소드 내부 구현
	- 동적 HTML 작성하는 업무를 구현
	- HttpServletResponse 객체의 getWriter() 호출 -> PrintWriter 반환
	- PrintWriter == BufferedWriter 과 유사
	- PrintWriter 객체의 printXXX()를 사용해서 HTML 코드를 작성
	
4. 브라우저 요청 가능한 URL 매핑
	- 가상 주소 매핑 -> web.xml
	

서블릿 동작
	- 서블릿(서블릿 클래스의 인스턴스)은 서블릿 컨테이너(톰캣)가 생성하고 실행하고 관리한다.
	- 톰캣 : 서블릿 컨테이너, WAS : http://apache.org
	
	1. 클라이언트의 URL 요청
		- 브라우저가 요청한다.
		- 사전에 웹 서버측에[가상 URL + 서블릿 클래스]로 매핑되어 있는 배포 서술서(Deployment Descriptor, web.xml)가 있어야 한다.
		
	2. 톰캣에게 전달
	
	3. request, response 객체 생성
		- 컨테이너가 받은 요청을 처리하기 위해서 두 객체를 미리 생성한다.
		- request : HTTP 요청을 처리한다.
		- response : HTTP 응답을 처리한다.
		
	4. 서블릿 인스턴스 생성
		- *.java -> (compile) -> *.class -> (new) -> instance
		- 서블릿의 init() 메소드가 호출된다.
		
	5. service() 메소드 호출
		- service() 메소드가 호출되면 그 내부에서 HTTP 요청 방식을 확인한다.
			+ request(response) 객체 전달
			-> GET : doGet() 메소드를 호출한다
			-> POST : doPost() 메소드를 호출한다.
			
	6. doGet()/doPost() 메소드 호출
		- HTML 페이지를 동적으로 생성하는 역할
		- HTML 페이지 생성 이외의 업무도 담당
		
	7. 응답
		- doGet()/doPost() 메소드에 웹 페이지 생성 -> 결과물을 response 객체에 담는다. -> 컨테이너가 HTTP 응답 메시지로 바꿔서 웹서버로 전달한다.
		- 응답 메시지를 작성하는데 사용했던 모든 자원들을 모두 해제한다. -> request, response 객체를 버린다.
		
	8. 재요청 발생
		- 동일한 서블릿에게 또 요총이 발생하면.. 일부 단계 생략한다.
		- 첫요청 : request/response 객체 생성 -> 서블릿 객체 생성 -> init() 호출 -> service() 호출 -> doGet/doPost() 호출 -> 응답 -> request/response 객체 소멸
		- 재요청 : request/response 객체 생성 -> service() 호출 -> doGet/doPost() 호출 -> 응답 -> request/response 객체 소멸
		

A 페이지 -> (데이터 전달) -> B 페이지

1. *.html -> *.do : 가능

2. *.do -> *.do : 가능

3. *.do -> *.html : 불가능

4. *.html -> *.html : 불가능