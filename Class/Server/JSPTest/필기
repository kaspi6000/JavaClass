JSP, Java Server Pages
	- 서블릿의 일종, 외형이 HTML 문서
	- 알바생(종류가 다른)
	- 서블릿 장점 : 자바 문법을 자유롭게 사용
	- 서블릿 단점 : HTML 작성이 힘들다.(문자열로 작성)
	- JSP 장점 : HTML 작성이 쉽다.(HTML 문서 기반)
	- JSP 단점 : 자바 문법이 불편하다.
	- 가상 주소 매핑이 불필요 -> 직접 접근 가능(WebContent 소속)
	
JSP 구성 요소
	- 주석, Comment
	- JSP 지시어(지시자), JSP Directive : 환경 설정
	- 스크립트 요소, Script Elements
	- 액션 태그, Action Tag
	
JSP 주석
	- *.jsp 내에서 사용하는 주석
	a. <!-- --> : HTML 주석
	b. <%-- --%> : JSP 주석
	c. 스크립트 요소 내의 주석
	
JSP 지시자, JSP Directive
	- <%@ xxx %>
	- JSP를 실행하는 컨테이너(톰캣) 에게 해당 JSP 페이지를 어떻게 처리할지 알려주는 역할
	a. page 지시자
	b. include 지시자
	c. taglib 지시자
	
스크립트 요소, Scripting Elements
	- <% %>
	- 자바 구문을 지원하는 역할
	a. 스크립툴릿, Scriptlet, <% %>
	b. 익스프레션, Expression, <%= %>
	c. 선언부, Declaration, <%! %>
	
액션 태그, Action Tag
	- <xx:XX> -> <c:if>, <jsp:include>
	- 태그 형식을 빌린 자바 명령어
	a. JSP 기본 액션 태그
	b. JSTL 확장 액션 태그
	c. 사용자 커스텀 액션 태그
	
page 지시자
	- <%@ page 속성="값" 속성="값" .. %>
	- <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
	
	a. language
		- JSP 페이지에서 사용할 프로그래밍 언어 지정
		- 기본값 "java"
		
	b. contentType
		- 웹 페이지의 내용물 형식을 브라우저에게 알려주는 역할
		- contentType="text/html; charset=UTF-8"
		- text/html : MIME(Multipurpose Internet Mail Extension)
		- contentType="text/html; charset=ISO-8859-1" // 이클립스 기본 설정(EUC-KR, MS949)
		- 문서 형식 + 브라우저에게 알려줄 인코딩 종류
		
	c. pageEncoding
		- 현재 페이지의 인코딩 문자셋
		- 기본값 : ISO-8859-1
		- 이 처리를 안하면 한글 깨짐(UTF-8)
		- contentType과 동일하게 설정
		
	d. import
		- 패키지 or 클래스 참조
		- 자바의 import문과 동일
		- 여러개의 import를 할때 쉼표로 연결할 수 있다.
		
	e. session
		- 세션 사용 유무 설정
		- 기본값 true
		
	f. buffer
		- JSP 페이지의 출력 버퍼 크기 지정
		- 기본값 : 8KB(조절은 가능하지만.. 되도록 수정 안함)
		- buffer = "none" // 8KB 넘어가면 에러 발생
		
	g. info
		- 페이지에 대한 설명(개발자용)
		
	h. errorPage
		- 에러 페이지로 사용할 페이지를 지정
	
	i. isErrorPage
		- 본인이 에러 페이지라고 선언
		
include 지시자
	- <%@ include file="URL" %>
	- 특정 JSP/HTML 페이지를 현재 JSP 페이지의 일부에 삽입하는 기능
	- HTML의 <iframe>과 유사한 역할
	- 조각 페이지
	- 재사용(**) + 관리(**)
	- 여러 페이지에 재사용되는 부분을 조각 페이지로 만들어서 재사용(참조)
	
taglib 지시자
	- JSTL, 커스텀 태그 등을 사용하기 위해서 지정하는 지시자
	- 나중에 수업
	
----------------------------------------------------------------지시자


JSP 스크립트 요소
	- JSP 페이지내에서 자바 구문을 지원하기 위한 요소
	a. 선언문
	b. 스크립틀릿
	c. 표현식
	
스크립틀릿, Scriptlet
	- Script + Applet
	- <% %>
	- 이 영역은 자바 영역이다.
	- 비즈니스 코드(업무 구현)
		- 데이터 조작/가공
		- JDBC
		- 동적 HTML 코드 제어
	- 사용 빈도 높음
	- ex04_scriptlet.jsp
	- 스크립틀릿내에서 선언한 모든 변수는 doGet()/doPost() 메소드의 지역 변수이다.
	
표현식, Expression
	- <%= %>
	- 상수, 변수, 메소드 반환값 등을 HTML 페이지의 원하는 위치에 출력하는 역할
	
선언문, Declaration
	- <%! %>
	- JSP 페이지의 멤버 변수 or 메소드를 선언하는 역할
	- 사용 빈도 낮음
	

JSP 내장 객체, Implicit Object
	- 개발자가 직접 객체를 생성하지 않더라도 미리 예약된 표현을 통해 제공 되는 객체들..
	- 서블릿에서도 JSP 내장객체를 사용할 수 있다. 단, 서블릿에서는 직접 생성해서 사용해야 한다.
	  (자바에서는 객체를 제공하는 예약어가 존재 X)
	- request, response, session, pageContext, out // 필수
	- application, config, page, exception // 추가
	- 위와 동일한 단어의 변수를 생성할 수 없다.
	- ex07_request_form.jsp
	- ex07_request_process.jsp
	- ex08_request_form.jsp
	- ex08_request_process.jsp
	
	a. request 
		- 클라이언트 -> (모든 행동) -> 서버
		- javax.servlet.http.HttpServletRequest 클래스
		- HTTP 요청과 관련 행동 : 전송된 데이터 관리(***), HTTP 헤더 정보 관리 등...
		1. 요청 파라미터 가져오기(************************************)
			- 클라이언트가 서버로 보낸 데이터 수신
			- ex07_request_form.jsp
			- ex07_request_process.jsp
			- ex08_request_form.jsp
			- ex08_request_process.jsp
			- ex12_request_form.jsp
			- ex12_request_process.jsp
			
		2. HTTP 요청 헤더 정보 가져오기(가끔)
			- ex09_request_headers.jsp
		
		3. 세션 처리(*******************************)
			- 나중에
			
		4. 쿠키 처리(애매...함)
			- 나중에
			
		5. URL 처리(가끔)
			- 나중에
			
		6. 인코딩 처리(반드시, 횟수X)
			- 나중에
			
		7. 데이터 입출력(*************************)
			- setAttribute();
			
			- getAttribute();
			
			
	b. response
		- 서버 -> (모든 행동) -> 클라이언트
		- javax.servlet.http.HttpServletResponse 클래스
		- HTTP 응답과 관련 행동 : 인코딩 정보, MIME, HTML 페이지 작성 등..
	
		a. 응답 컨텐츠 작성
			- PrintWriter(서블릿), JspWriter(JSP) : HTML 생성업무 담당 객체 <- response로 만든다.
			- HTML 페이지 작성
		
		b. 페이지 이동하기
			- ex10_response_one.jsp
			- ex10_response_two.jsp
			
		c. 쿠키 처리
			- request 반대 행동
			- request : 쿠키값 읽기
			- response : 쿠키값 쓰기
		
		d. 인코딩 처리
			- 나중에


페이지 요청 방식 구분하는 방법
- 브라우저가 서버에게 페이지를 요구하면.. 반드시 아래 둘중의 한가지 방법으로 요청이 발생
- ex11_method_request.jsp
- ex11_method_response.jsp

1. POST
2. GET
	

	c. pageContext 객체
		- 한 페이지가 요청 ~ 응답까지 과정에 관련된 행동을 하는 객체
		- request와 유사
		
		1. 데이터 입출력
			- setAttribute(), getAttribute()
			
		2. 페이지 이동
			- forward()
			- ex13_pagecontext_one.jsp
			- ex13_pagecontext_two.jsp
			
	d. application 객체
		- 웹 어플리케이션을 운용하는 서버에 관련된 정보를 관리
		
		1. 데이터 관리
			- setAttribute(), getAttribute()
			
		2. 서버 환경 정보
			- ex14_application.jsp
			
	e. out 객체
		- 응답 페이지 작성하는 객체
		- ex15_out.jsp
		
내장 객체의 데이터 입출력 기능(**)
	- pageContext, request, session, application
	- 객체 자신 내부에 데이터를 관리하는 기능 내장(맵 계열)
		- setter : setAttribute(String key, Object value)
		- getter : Object getAttribute(String key)
	- **위의 4가지 객체는 각각 생명 주기가 다르다.(수명)
	- 내장 객체의 유효 범위(생명 주기)를 영역(scope)라고 한다.(Servlet/JSP)
	
	- ex16_scope_one.jsp
	- ex16_scope_two.jsp
	- ex16_scope_three.jsp
	
	f. session 객체
		- 사용자의 첫 요청때 서버 메모리에 생성 ~ 마지막 요청 후 만료 시간이 지나면 소멸
		-                         ~ 만료 시간 이내에 재접속 발생하면 만료 시간이 다시 갱신
		- 접속한 유저마다 각자의 세션 객체가 생성(개인꺼 - 다른 유저의 세션 접근 불가능)
		- ex17_session.jsp
		
액션 태그, Action Tag
	- 프로그래밍 기능이 있는 태그
	- JSP 페이지에서 자바 코딩 -> 스크립틀릿 -> 가독성 저하 -> JSP 페이지는 HTML 기반이니까 프로그램 코드도 HTML 형식으로
	- XML 문법 기반(=문법이 엄격하다)
		a. 태그 or 속성 : 대소문자 구분한다.
		b. <input>(X) or <input/>(O)
	1. JSP 액션 태그(standard.jar)
	2. JSTL 액션 태그(jstl.jar)
	3. 사용자 정의 태그
	
forward 액션
	- pageContext.forward(url); // 자바 구문
	- <jsp:forward page="url"> // XML 구문
	- ex21_forward_form.jsp	// 데이터 입력 페이지
	- ex21_forward_process.jsp // 데이터 수신 & 업무 처리 (& 완료 메시지)
	- ex21_forward_result.jsp // 완료 메시지
	
include 액션
	- <%@ include file = "url" %>
	- <jsp:include page = "url" />
	- ex22_include_full.jsp
	- ex22_include_part.jsp
	
자바빈, Java Bean
	- 자바 클래스로 만든 객체
	- JSP에서 자바빈이란 명칭으로 클래스 객체를 관리하는 기능을 제공
	- 코드 재사용 & 가독성

자바빈 설계 규약
	1. 모든 멤버 변수는 getter/setter 메소드가 있어야 한다.
		- private int age;
		- public void setAge(int age)
		- public void getAge()
		- set멤버명() / get멤버명()
	2. getter는 매개변수를 가질 수 없다.
	3. setter는 반드시 매개변수를 1개 이상 가져야 한다.
	4. getter만 구현은 가능하나 setter만 구현은 안된다.(읽기전용O, 쓰기전용X)
	5. 생성자 매개변수를 가질 수 없다.(생성자 오버로딩을 하면 안된다.)
	6. 자바빈의 용도는 관리하기 위한 데이터 단위로 사용한다.(DTO와 유사)
	
자바빈을 사용해서 JSP 페이지에 적용하기
	- 스프링 수업 도움
	1. <jsp:useBean>
		- <jsp:useBean id = "" class = "" scope = "" />
		- scope 속성 : page(default), request, session, application
		- 현재 생성한 객체가 scope에 기재된 내장 객체에 자동으로 setAttribute()로 추가된다.
		
	2. <jsp:setProperty>
		- <jsp:setProperty name "빈의 id" property = "setter명" value = "값" />
		- setter() 호출
		
	3. <jsp:getProperty>
		- <jsp:getProperty name = "빈의 id" property = "getter명" />
		- getter() 호출
		
	자바빈을 사용하면 편리한 예
	- ex24_bean_form.jsp
	- ex24_bean_process.jsp
	- Address.java
	
	자바빈 생명주기
	- ex24_bean_one.jsp
	- ex24_bean_two.jsp
	- ex24_bean_three.jsp
	- Item.java

세션, Session vs 쿠키, Cookie
	- 공통점
		1. 고객 정보(개인 정보)를 저장하는 매체
		2. 서로 간섭이 불가능하다.(다른 고객의 정보 열람 불가능)
	- 차이점
		1. 쿠키
			- 클라이언트측 저장(메모리 -> HDD)
			- 문자열 저장용(텍스트 포맷 저장소)
			- 만료 시간 지정 가능(장기 보관을 위해서)
		2. 세션
			- 서버측 저장(메모리)
			- 모든 타입 저장용(문자열 ~ 객체)
			- 만료 시간 지정(접속 고객 관리차원)
			
세션 제어
	- ex26_session.jsp
	- ex26_session_set.jsp
	- ex26_session_del.jsp
	- ex26_session_reset.jsp
	- ex26_session_interval.jsp
	
쿠키 제어
	- ex27_cookie.jsp